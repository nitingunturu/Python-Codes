# -*- coding: utf-8 -*-
"""python-programming-scripts.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/gist/nitingunturu/9cf03c3a052c04e5b2032cd7ab5e341c/python-programming-scripts.ipynb

1. Add two of your favorite numbers, and compare the result with the subtracted number.
2. Print "Assignment 1 for adding subtracting and finding the maximum"
"""

#Fav Numbers
fav_num1 = 8
fav_num2 = 10

#Add 2 Fav Numbers
sum_outcome = fav_num1 + fav_num2

#Subtract 2 Fav Numbers
subtraction_outcome = fav_num1 + fav_num2

#Compare Sum and Subtracted Number
if sum_outcome > subtraction_outcome:
  print("The sum is greater than the subtraction outcome.")
else:
  if sum_outcome < subtraction_outcome:
    print("The subtraction outcome is greater than the sum.")
  else:
     print("The sum and the subtraction outcome are equal.")

#Printing Final Message
print("Assignment 1 for adding subtracting and finding the maximum")

"""a=8
b=10

show me a+b

Next cell show me a-b

3rd cell compare the result
"""

#Fav Numbers
fav_num1 = 8
fav_num2 = 10

#Add 2 Fav Numbers
print(fav_num1 + fav_num2)

#Subtract 2 Fav Numbers
print(fav_num1 - fav_num2)

#Outcome of Added Numbers
sum_outcome = fav_num1 + fav_num2
difference_outcome = fav_num1 - fav_num2

if sum_outcome > difference_outcome:
    print("The outcome of addition is greater than the outcome of subtraction.")
else:
    if sum_outcome < difference_outcome:
        print("The outcome of subtraction is greater than the outcome of addition.")
    else:
        print("The outcome of addition is equal to the outcome of subtraction.")



"""Write a python code to print prime numbers between 1 to 100"""

for num in range(2, 101): #numbers we are working with
    prime = True
    for i in range(2, num):
        if num % i == 0: #divisible by 1 without leaving any remainder
            prime = False
    if prime:
        print(num)

"""Write a python program to find a number to be even or odd"""

#Allowing user to input a number when prompted
num = int(input("Enter a number: "))

# Checking if the number is even or odd
if num % 2 == 0:
    print("The number is even.")
else:
    print("The number is odd.")

"""Write a python code to print numbers that are divisible by 2 & 5. (1-100)"""

num = int(input("Enter a number"))
if (num % 2) == 0:
   print("The number is divisible by 2.")

if (num % 5) == 0:
  print("The number is divisible by 5.")

"""Write python program to print all numbers divible by 3 & 9. (1-100)

[link text](https://)Inserting a function to an array
"""

thislist = ["Target", "Ikea", "CVS"]
thislist.insert(1, "Starbucks")
print(thislist)

"""Take array of 10, print all values and add/replace numbers within the array"""

thislist = []

for i in range(1, 11):
    thislist.append(i)

thislist.remove(5)

print(thislist)

"""Write a program to check if a number is pallendrome or not"""

def is_palindrome(num):

  if reversed_num == str(num):
   #reversed_num = str(num)
    return True
  else:
    return False

  num = int(input("Enter a number: "))

  if is_palindrome(num):
        print(num, "is a palindrome!")
  else:
        print(num, "is not a palindrome.")
return num

"""1. TAKE A LIST, AS LIST_1 COPY THE VALUES OF LIST_1 IN LIST_2  AND SORT LIST_2 IN ACC AND DEC ORDER AND APPEND() TO JOIN LIST2 WITH LIST1


LIST_1=[99,100,5,1,4]

LIST_2= [99,100,5,1,4]

LIST_2_ACC = [1,4,5,99,100]
LIST_2_DEC = [100,99,5,4,1]

APPEND()
LIST_3=LIST_2_ACC + LIST_2_DEC
"""

LIST_1 = [99, 100, 5, 1, 4]

LIST_2 = LIST_1.copy() #copying values from list1 to list2

LIST_2_ACC = sorted(LIST_2) #ascending order

LIST_2_DEC = sorted(LIST_2, reverse=True) #decending order


LIST_3 = LIST_2_ACC + LIST_2_DEC #append (+) both lists

print("LIST_1:", LIST_1)
print("LIST_2_ACC:", LIST_2_ACC)
print("LIST_2_DEC:", LIST_2_DEC)
print("LIST_3:", LIST_3)

"""def is_palindrome(n):
    return str(n) == str(n)[::-1]
"""

def is_palindrome(num):
  return str(num) == str(num)[::-1] #reversing

def nitin (start,end): #range

  for num in range(start,end + 1): #index numbers start from 0 and ends with length -1
    print("Palindrome numbers between", start, "and", end, "are:")
    if is_palindrome(num):
      print(num)

start = int(input("Enter the starting number"))
end = int(input("Enter the end number"))

nitin (start,end)

"""Write a code using Armstrong numbers
1. Define a number.
2. Make that numbere classified as string.
3. Find the length and give it powers.
"""

def is_armstrong(num):
  num_str = str(num)
  num_digits = len(num_str)

  armstrong_num = sum(int (digit) ** num_digits for digit in num_str)

  return armstrong_num == num

number = int(input("Enter a number"))
if is_armstrong(number):
    print(number, "Is armstrong number")
else:
    print(number, "is not armstrong number")

"""Write a program to check if a number is PAL-PRIME number or not

PAL PRIME number
Its a PALIMDROME PRIME NUMBER


1. Prime

2. Palindrome




if , else, if-else

While Statement

if:
Statement
Else:
Statement


While Statement:

"""

def is_prime(n):
  if n<=1:
    return False
  if n<=3:
    return True

  if n%2 == 0 or n%3 ==0:
    return False
  i = 5
  while i*i <=n:
    if n%i ==0 or n%(i+2)==0:
      return False
    i+=6
    return True

def is_palindrome(n):
    return str(n) == str(n)[::-1]

def is_palprime(n):
    return is_prime(n) and is_palindrome(n)

number = int(input("Enter a number: "))
if is_prime(number):
    print(number, "is a  palprime number")
else:
    print(number, "is not a palprime number")

"""Write a program to check if a number is Armstrong and Palindrome"""

def is_armstrong(num):
  num_str = str(num)
  num_digits = len(num_str)

  armstrong_num = sum(int (digit) ** num_digits for digit in num_str)

  return armstrong_sum == num

def is_armstong